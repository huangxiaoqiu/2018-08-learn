/**
 * 1、create-react-app: 全局安装，可以使用这个命令来快速构建react开发环境
 *
 * 2、最长用的方法： ReactDOM.render(domHtml, eleObj);
 *
 * 3、react元素的特点：react元素是不可变的，当元素被创建之后，无法改变其内容和属性，所以更新界面的唯一办法就是创建一个新元素，然后将他传入到ReactDOM.render()方法
 *   但是React只会更新必要的部分（ReactDOM 首先会比较元素内容先后的不同，而在渲染过程中只会更新改变了的部分）
 *
 * 4、react 使用JSX 来替代js，可以在JSX中使用js表达式，表达式写在花括号{}中
 *
 * 5、在JSX中不能使用if else 语句，但可以使用三元运算表达式来替代
 *
 * 6、React推荐使用内联样式，可以使用camelCase（驼峰命名法） 语法来设置内联样式.React会在指定元素数字后自动添加px
 *
 * 7、注释需要写在花括号中 如：
 *
 * 8、JSX允许在模板中插入数组，数组会自动展开所有成员
 *
 * 9、React组件
 *  1）可以用一个函数来定义一个组件，也可以用class来定义一个组件（组件名都是首字母都是大写的，为了跟原生元素进行区分）  用<组件名/>来创建一个组件的实例
 *
 *  2）React把组件看成是一个状态机，通过与用户的交互，实现不同状态，然后渲染UI，让用户界面和数据保持一致
 *
 *  3）只需要更新组件的state，然后根据新的state重新渲染用户界面（不要操作DOM），在构造函数中初始化this.state 值，然后在某个时间 设置状态值 this.setState()
 *
 *  4）生命周期钩子：componentDidMount(){} 当组件输出到DOM后会执行该方法；componentWillUnmount(){} 当组件从DOM中移除的时候执行
 *
 * 10、React Props ： state 和 props 主要的区别在于 props是不可变得，而state是可以改变的，所以有些容器组件需要定义state来更新和修改数据，而子组件只能通过props来传递数据
 *
 * 11、条件渲染的方式：元素变量的方式、&&运算符的方式、三元运算符的方式、阻止组件渲染（组件return null）
 *
 * 12、React事件处理：必须谨慎对待JSX 回调函数中的this（比如事件中的回调函数，如果不处理this，那么函数中的this是undefined）
 *     四种解决方法：1）在构造函数中
 */